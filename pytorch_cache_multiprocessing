def cache_item_loader(path: str, sr: int, cache_level: int, audio_settings: dict) -> np.ndarray:
    x = librosa.load(path, sr)[0]
    if cache_level == 2:
        x = librosa.util.fix_length(x, sr)
        x = librosa.feature.melspectrogram(y=x, **audio_settings)        
        x = librosa.feature.mfcc(S=librosa.power_to_db(x), n_mfcc=audio_settings["n_mels"])
    return x


def init_cache(data_list: list, sr: int, cache_level: int, audio_settings: dict, n_cache_workers: int = 4) -> list:
    """Loads entire dataset into memory for later use.

    Args:
        data_list (list): List of data items.
        sr (int): Sampling rate.
        cache_level (int): Cache levels, one of (1, 2), caching wavs and spectrograms respectively.
        n_cache_workers (int, optional): Number of workers. Defaults to 4.

    Returns:
        cache (list): List of data items.
    """

    cache = []

    loader_fn = functools.partial(cache_item_loader, sr=sr, cache_level=cache_level, audio_settings=audio_settings)

    pool = mp.Pool(n_cache_workers)

    for audio in tqdm(pool.imap(func=loader_fn, iterable=data_list), total=len(data_list)):
        cache.append(audio)
    
    pool.close()
    pool.join()

    return cache

  
##########################################################################################################################################################
'''
pool.imap(func, iterable): The imap function is part of the multiprocessing.Pool class in Python's multiprocessing module. 
It allows you to apply a given function (func) to each element of an iterable (iterable) in parallel using multiple worker processes from the pool. 
It returns an iterator that yields the results of applying the function to each element in the iterable.

In the context of the code you provided:

func is the loader_fn function, which is a partial function that wraps the cache_item_loader function with certain arguments pre-set.
iterable is the data_list, which is a list of audio file paths.
So, pool.imap(func=loader_fn, iterable=data_list) applies the loader_fn function to each audio file path in the data_list using the worker processes in the multiprocessing pool.
'''

##########################################################################################################################################################
# Here's a simple example to illustrate the use of functools.partial:
def power(base, exponent):
    return base ** exponent

from functools import partial

# Create a new function with fixed exponent
square = partial(power, exponent=2)

# Now, imagine you want to create variations of this function for specific bases and exponents. You can use functools.partial to achieve that:
# Create a new function with fixed base and exponent
cube = partial(power, base=3, exponent=3)

# Use the new functions
result1 = square(5)  # Equivalent to power(5, 2)
result2 = cube()     # Equivalent to power(3, 3)

'''
In this example, partial is used to create two new functions, square and cube, based on the original power function. The fixed arguments (exponent and/or base) are pre-set, 
and you can then use these new functions as if they were regular functions, but with some arguments already determined.'''

  
