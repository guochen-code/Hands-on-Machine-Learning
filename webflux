from datetime import datetime
from flask import Flask, Response

app = Flask(__name__)

def generate():
    while True:
        yield 'data: {}\n\n'.format(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        time.sleep(1)

@app.route('/stream')
def stream():
    return Response(generate(), mimetype='text/event-stream')

if __name__ == '__main__':
    app.run(debug=True)

# run python streaming.py in the terminal. Then, you can access the streaming endpoint by visiting http://localhost:5000/stream in your web browser.
# can only see one line
# need to refresh to get latest data

****************************************************************************************************************************************************************************
same
****************************************************************************************************************************************************************************
# http://localhost:5000/stream

from flask import Flask, Response
import time

app = Flask(__name__)

def event_stream():
    while True:
        yield f"data: {int(time.time())}\n\n"
        time.sleep(1)

@app.route('/stream')
def stream():
    return Response(event_stream(), mimetype="text/event-stream")

if __name__ == '__main__':
    app.run(debug=True)

****************************************************************************************************************************************************************************
from flask import Flask, Response
import time
import json  # Add import for the json module
from kafka import KafkaConsumer

app = Flask(__name__)

def kafka_event_stream():
    consumer = KafkaConsumer('sample', bootstrap_servers='localhost:9092', 
                             value_deserializer=lambda m: json.loads(m.decode('utf-8')))
    for message in consumer:
        yield f"data: {json.dumps(message.value)}\n\n"  # Serialize message value to JSON

@app.route('/stream')
def stream():
    return Response(kafka_event_stream(), mimetype="text/event-stream")

if __name__ == '__main__':
    app.run(debug=False)
****************************************************************************************************************************************************************************
import urllib.request as request
import threading

def consume_stream(url, thread_id):
    with request.urlopen(url) as response:
        if response.getcode() == 200:
            for line in response:
                print(f"Thread {thread_id}: {line.decode('utf-8')}")  # Print thread ID along with the data
        else:
            print(f"Thread {thread_id}: Failed to connect to the stream endpoint. Status code: {response.getcode()}")

def main():
    stream_url = 'http://localhost:5000/stream'  # Replace with your streaming URL
    num_threads = 200  # Change the number of threads as needed

    # Create and start multiple threads
    threads = []
    for i in range(num_threads):
        thread = threading.Thread(target=consume_stream, args=(stream_url, i))
        thread.start()
        threads.append(thread)

    # Wait for all threads to finish
    for thread in threads:
        thread.join()

if __name__ == "__main__":
    main()
****************************************************************************************************************************************************************************
****************************************************************************************************************************************************************************
****************************************************************************************************************************************************************************
app.py:
from flask import Flask, Response
import time
import json  # Add import for the json module
from kafka import KafkaConsumer

app = Flask(__name__)

def kafka_event_stream():
    consumer = KafkaConsumer('sample', bootstrap_servers='localhost:9092', 
                             value_deserializer=lambda m: json.loads(m.decode('utf-8')))
    for message in consumer:
        yield f"data: {json.dumps(message.value)}\n\n"  # Serialize message value to JSON

@app.route('/stream')
def stream():
    return Response(kafka_event_stream(), mimetype="text/event-stream")


wsgi.py:
from app import app  # Replace 'your_flask_app' with the name of your Flask app file

if __name__ == "__main__":
    app.run()

gunicorn -w 4 -b 127.0.0.1:5000 wsgi:app --debug 
